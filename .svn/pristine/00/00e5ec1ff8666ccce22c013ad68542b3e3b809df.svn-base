package fr.esiag.sim.dao;

import java.util.List;

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Repository;

import fr.esiag.sim.model.CategoryMedecine;
@Repository
public class CategoryMedecineDAOImpl implements AbstractDAO<CategoryMedecine>{
	private SessionFactory sessionFactory;
	private static final Logger logger = LoggerFactory.getLogger(AreaDAOImpl.class);
	
	public void setSessionFactory(SessionFactory sessionFactory) {
		this.sessionFactory = sessionFactory;
	}
	@Override
	public void add(CategoryMedecine o) {
		Session session = this.sessionFactory.getCurrentSession();
		session.persist(o);
		
	}

	@Override
	public void update(CategoryMedecine o) {
		Session session = this.sessionFactory.getCurrentSession();
		session.update(o);
		
	}

	@SuppressWarnings("unchecked")
	@Override
	public List<CategoryMedecine> list() {
		Session session = this.sessionFactory.getCurrentSession();
		List<CategoryMedecine> categoryMedecineList = session.createQuery("from CategoryMedecine").list();
		return categoryMedecineList;
	}

	@Override
	public CategoryMedecine getById(int id) {
		Session session = this.sessionFactory.getCurrentSession();
		CategoryMedecine m = (CategoryMedecine) session.load(CategoryMedecine.class, new Integer(id));
		logger.info("CategoryMedecine loaded successfully, CategoryMedecine details=" + m);
		return m;
	}

	@Override
	public void remove(int id) {
		Session session = this.sessionFactory.getCurrentSession();
		CategoryMedecine m = (CategoryMedecine)session.get(CategoryMedecine.class, new Integer(id));
		session.delete(m);
	}

	@SuppressWarnings("unchecked")
	@Override
	public List<CategoryMedecine> searchByWording(String wording) {
		Session session = this.sessionFactory.getCurrentSession();
		String hql = "from CategoryMedecine m where m.wording = :wording";
		List<CategoryMedecine> result = session.createQuery(hql)
		.setParameter("wording", wording)
		.list();
		return result;
	}

}
