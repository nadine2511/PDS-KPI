package fr.esiag.sim.controller;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;

import fr.esiag.sim.model.Area;
import fr.esiag.sim.model.PaginationJsonObject;
import fr.esiag.sim.service.AreaService;
/**
 * Controller used to control {@link Area}
 * @author NGUYEN Nhat Minh
 * @version 1.0.0
 * @category Controller
 * @see {@link Object}
 */
@Controller
public class AdminTestPagination {
	private AreaService areaService;
	@Autowired(required=true)
	@Qualifier("areaService")
	public void setAreaService(AreaService areaService) {
		this.areaService = areaService;
	}
    @RequestMapping(value = "/helloWorld.web", method = 
	    RequestMethod.GET)
    public String printWelcome(@ModelAttribute("area") Area area, BindingResult result,ModelMap model, HttpServletRequest 
	    request, HttpServletResponse response) {
	
    	return "testPagination";

    }

    @RequestMapping(value = "/springPaginationDataTables.web", method = RequestMethod.GET, produces = "application/json")
    public @ResponseBody String springPaginationDataTables(HttpServletRequest  request) throws IOException {
		
    	//Fetch the page number from client
    	Integer pageNumber = 0;
    	if (null != request.getParameter("iDisplayStart"))
    		pageNumber = (Integer.valueOf(request.getParameter("iDisplayStart"))/10)+1;		
    	
    	//Fetch search parameter
    	String searchParameter = request.getParameter("sSearch");
    	
    	//Fetch Page display length
    	Integer pageDisplayLength = Integer.valueOf(request.getParameter("iDisplayLength"));
    	
    	//Create page list data
    	List<Area> personsList = createPaginationData(pageDisplayLength);
		
		//Here is server side pagination logic. Based on the page number you could make call 
		//to the data base create new list and send back to the client. For demo I am shuffling 
		//the same list to show data randomly
		if (pageNumber == 1) {
			Collections.shuffle(personsList);
		}else if (pageNumber == 2) {
			Collections.shuffle(personsList);
		}else {
			Collections.shuffle(personsList);
		}
		
		//Search functionality: Returns filtered list based on search parameter
		personsList = getListBasedOnSearchParameter(searchParameter,personsList);
		
		
//		PersonJsonObject personJsonObject = new PersonJsonObject();
		PaginationJsonObject areaJsonObject = new PaginationJsonObject();
		//Set Total display record
//		personJsonObject.setiTotalDisplayRecords(500);
//		//Set Total record
//		personJsonObject.setiTotalRecords(500);
//		personJsonObject.setAaData(personsList);
		
		areaJsonObject.setiTotalDisplayRecords(personsList.size());
		areaJsonObject.setiTotalRecords(personsList.size());
		areaJsonObject.setAaData(personsList);
		
		Gson gson = new GsonBuilder().setPrettyPrinting().create();
		String json2 = gson.toJson(areaJsonObject);
	
		return json2;
    }

    //Feed data area box
	private List<Area> getListBasedOnSearchParameter(String searchParameter,List<Area> personsList) {
		
		if (null != searchParameter && !searchParameter.equals("")) {
			List<Area> personsListForSearch = new ArrayList<Area>();
			searchParameter = searchParameter.toUpperCase();
			for (Area area : personsList) {
				if(area.getWording().toUpperCase().indexOf(searchParameter) != -1 || area.getDescription().toUpperCase().indexOf(searchParameter) != -1){
					personsListForSearch.add(area);
				}
			}
			personsList = personsListForSearch;
			personsListForSearch = null;
		}
		return personsList;
	}

	private List<Area> createPaginationData(Integer pageDisplayLength) {

		List<Area> listAreas = this.areaService.listAreas();
		List<Area> listFeedToPage = new ArrayList<Area>();
		
		for (int i = 0; i < pageDisplayLength-5; i++) {
 
			for (Area area : listAreas) {
				listFeedToPage.add(area);
				
			}
		}
		return listFeedToPage;
	}
}